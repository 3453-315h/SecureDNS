// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Texnomic.SecureDNS.Data;

namespace Texnomic.SecureDNS.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190919042626_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-rc1.19456.14");

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Models.Blacklist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Models.Cache", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Response")
                        .HasColumnType("BLOB");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("Cache");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Models.Configuration", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Models.Host", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Domain = "www.secure.dns",
                            IPAddress = "127.0.0.1"
                        });
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Models.Resolver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CRYPT")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HTTPS")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("BLOB");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TCP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TLS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UDP")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("IPAddress")
                        .IsUnique();

                    b.ToTable("Resolvers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CRYPT = false,
                            Domain = "cloudflare-dns.com",
                            HTTPS = true,
                            Hash = new byte[] { 4, 197, 32, 112, 140, 32, 66, 80, 40, 30, 125, 68, 65, 124, 48, 121, 41, 28, 99, 94, 29, 68, 155, 197, 247, 113, 58, 43, 222, 210, 162, 164, 177, 108, 61, 106, 200, 119, 184, 203, 143, 46, 80, 83, 253, 244, 24, 38, 127, 97, 55, 237, 255, 194, 190, 233, 11, 93, 185, 126, 225, 223, 28, 226, 116 },
                            IPAddress = "1.1.1.1",
                            Name = "CloudFlare #1",
                            TCP = true,
                            TLS = true,
                            UDP = true
                        },
                        new
                        {
                            ID = 2,
                            CRYPT = false,
                            Domain = "cloudflare-dns.com",
                            HTTPS = true,
                            Hash = new byte[] { 4, 197, 32, 112, 140, 32, 66, 80, 40, 30, 125, 68, 65, 124, 48, 121, 41, 28, 99, 94, 29, 68, 155, 197, 247, 113, 58, 43, 222, 210, 162, 164, 177, 108, 61, 106, 200, 119, 184, 203, 143, 46, 80, 83, 253, 244, 24, 38, 127, 97, 55, 237, 255, 194, 190, 233, 11, 93, 185, 126, 225, 223, 28, 226, 116 },
                            IPAddress = "1.0.0.1",
                            Name = "CloudFlare #2",
                            TCP = true,
                            TLS = true,
                            UDP = true
                        },
                        new
                        {
                            ID = 3,
                            CRYPT = false,
                            Domain = "google-public-dns-a.google.com",
                            HTTPS = true,
                            Hash = new byte[] { 48, 130, 1, 10, 2, 130, 1, 1, 0, 157, 31, 164, 239, 93, 62, 136, 51, 25, 171, 231, 154, 109, 200, 43, 247, 42, 60, 29, 49, 46, 173, 93, 171, 65, 67, 54, 143, 4, 45, 69, 250, 129, 155, 200, 221, 30, 63, 2, 39, 162, 162, 57, 141, 185, 69, 224, 171, 63, 26, 177, 67, 168, 127, 131, 136, 75, 252, 203, 64, 35, 13, 170, 103, 60, 42, 68, 30, 202, 223, 57, 42, 187, 219, 124, 163, 103, 125, 206, 4, 187, 146, 72, 11, 188, 95, 100, 170, 202, 26, 91, 178, 149, 166, 106, 14, 220, 231, 6, 15, 5, 184, 139, 202, 8, 208, 171, 54, 41, 11, 25, 40, 21, 80, 78, 88, 151, 45, 96, 175, 249, 247, 236, 141, 171, 72, 129, 7, 227, 46, 47, 137, 176, 219, 205, 245, 206, 2, 37, 48, 235, 50, 209, 116, 8, 38, 251, 117, 132, 168, 18, 37, 186, 204, 112, 0, 91, 116, 69, 62, 173, 207, 62, 226, 160, 174, 117, 233, 179, 216, 90, 52, 22, 161, 13, 118, 112, 205, 31, 254, 53, 212, 60, 3, 163, 113, 221, 251, 228, 246, 135, 188, 249, 2, 222, 203, 104, 85, 34, 66, 240, 33, 31, 169, 87, 46, 97, 211, 187, 191, 238, 231, 130, 33, 154, 229, 121, 54, 8, 238, 6, 128, 11, 52, 125, 99, 64, 115, 37, 33, 238, 184, 19, 171, 84, 75, 182, 3, 20, 140, 234, 247, 193, 170, 166, 46, 244, 218, 42, 194, 52, 21, 5, 44, 22, 185, 2, 3, 1, 0, 1 },
                            IPAddress = "8.8.8.8",
                            Name = "Google #1",
                            TCP = true,
                            TLS = true,
                            UDP = true
                        },
                        new
                        {
                            ID = 4,
                            CRYPT = false,
                            Domain = "google-public-dns-b.google.com",
                            HTTPS = true,
                            Hash = new byte[] { 48, 130, 1, 10, 2, 130, 1, 1, 0, 157, 31, 164, 239, 93, 62, 136, 51, 25, 171, 231, 154, 109, 200, 43, 247, 42, 60, 29, 49, 46, 173, 93, 171, 65, 67, 54, 143, 4, 45, 69, 250, 129, 155, 200, 221, 30, 63, 2, 39, 162, 162, 57, 141, 185, 69, 224, 171, 63, 26, 177, 67, 168, 127, 131, 136, 75, 252, 203, 64, 35, 13, 170, 103, 60, 42, 68, 30, 202, 223, 57, 42, 187, 219, 124, 163, 103, 125, 206, 4, 187, 146, 72, 11, 188, 95, 100, 170, 202, 26, 91, 178, 149, 166, 106, 14, 220, 231, 6, 15, 5, 184, 139, 202, 8, 208, 171, 54, 41, 11, 25, 40, 21, 80, 78, 88, 151, 45, 96, 175, 249, 247, 236, 141, 171, 72, 129, 7, 227, 46, 47, 137, 176, 219, 205, 245, 206, 2, 37, 48, 235, 50, 209, 116, 8, 38, 251, 117, 132, 168, 18, 37, 186, 204, 112, 0, 91, 116, 69, 62, 173, 207, 62, 226, 160, 174, 117, 233, 179, 216, 90, 52, 22, 161, 13, 118, 112, 205, 31, 254, 53, 212, 60, 3, 163, 113, 221, 251, 228, 246, 135, 188, 249, 2, 222, 203, 104, 85, 34, 66, 240, 33, 31, 169, 87, 46, 97, 211, 187, 191, 238, 231, 130, 33, 154, 229, 121, 54, 8, 238, 6, 128, 11, 52, 125, 99, 64, 115, 37, 33, 238, 184, 19, 171, 84, 75, 182, 3, 20, 140, 234, 247, 193, 170, 166, 46, 244, 218, 42, 194, 52, 21, 5, 44, 22, 185, 2, 3, 1, 0, 1 },
                            IPAddress = "8.8.4.4",
                            Name = "Google #2",
                            TCP = true,
                            TLS = true,
                            UDP = true
                        },
                        new
                        {
                            ID = 5,
                            CRYPT = false,
                            Domain = "dns.quad9.net",
                            HTTPS = true,
                            Hash = new byte[] { 4, 125, 139, 215, 29, 3, 133, 13, 24, 37, 179, 52, 28, 41, 161, 39, 212, 172, 1, 37, 72, 138, 160, 241, 234, 2, 185, 216, 81, 44, 8, 106, 172, 114, 86, 236, 250, 61, 166, 160, 159, 73, 9, 85, 142, 172, 254, 185, 115, 23, 92, 2, 251, 120, 204, 36, 145, 148, 111, 67, 35, 137, 14, 29, 102 },
                            IPAddress = "9.9.9.9",
                            Name = "Quad9",
                            TCP = true,
                            TLS = true,
                            UDP = true
                        },
                        new
                        {
                            ID = 6,
                            CRYPT = true,
                            Domain = "resolver1-fs.opendns.com",
                            HTTPS = false,
                            IPAddress = "208.67.222.123",
                            Name = "OpenDNS #1",
                            TCP = false,
                            TLS = false,
                            UDP = true
                        },
                        new
                        {
                            ID = 7,
                            CRYPT = true,
                            Domain = "resolver2-fs.opendns.com",
                            HTTPS = false,
                            IPAddress = "208.67.220.123",
                            Name = "OpenDNS #2",
                            TCP = false,
                            TLS = false,
                            UDP = true
                        });
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.RoleClaim", b =>
                {
                    b.HasOne("Texnomic.SecureDNS.Data.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserClaim", b =>
                {
                    b.HasOne("Texnomic.SecureDNS.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserLogin", b =>
                {
                    b.HasOne("Texnomic.SecureDNS.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserRole", b =>
                {
                    b.HasOne("Texnomic.SecureDNS.Data.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Texnomic.SecureDNS.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Texnomic.SecureDNS.Data.Identity.UserToken", b =>
                {
                    b.HasOne("Texnomic.SecureDNS.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
